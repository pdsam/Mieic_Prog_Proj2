#ifndef BOARD_H 
#define BOARD_H 

#include <Windows.h>
#include "stdafx.h"
#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <cstdlib>

class Board
{
public:
	//constructors:
	Board(int x, int y);//default
	Board();//default in case x and y aren't avaible
	Board(std::string &Boardname, std::string &DictName);//Constructor that uses the board file, used in cwplayer

	/////////////////////////////////////////////////////////

	void setX(int newX);//changes the object's x value (height of the board)
	void setY(int newY);//changes the object's y value (length of the board)
	void displayBoard();//displays the board (displays the matrix, the internal representation of the board
	void updateIntern(std::string position, std::string word); //update intern structure
	bool RepeatWord(std::string word);//checks if the word to be written was already used

	/////////////////////////Program1 ////////////////////////////////////////////

	bool writeBoard(std::string orientation, std::string input);
	bool deleteWord(std::string position);//deletes word from the board
	bool verifyPosition(std::string position); //checks for errors in the input position
	std::string helpWordAux(std::string position, size_t i); //auxiliary to "?" (writes word with letters and ?)
	void saveBoard(std::string filename, std::string dictName, int flag);
	void resumeBoard(std::string &Boardname, std::string &DictName);
	size_t auxHelp(std::string position); //returns size of lines or columns
	std::string namefile(); //returns name of file to save

	//////////////////////////Program 2//////////////////////////////////////////////

	size_t sizeIntern(); // returns size of internStruct (number of words)
	std::string FindWordinStruct(size_t i); //returns word in struct - auxiliar to write clues 
	std::string FindPositioninStruct(size_t i);  //returns position in struct - auxiliar to write clues 
	std::string FindWordPosition(std::string position); //returns the word correspondent to the position written on the board
	void convert_to_playboard();//converts the board generated by programm 1 to a equivalent in board 2(since avaible spaces in board 1 are black spaces in board 2)
	void displayPlayBoard(); //display board
	bool FinalCheckBoard(); //checks if the board made by the player correponds to the solution
	void updateIntern_new(std::string position, std::string word); //updates intern structure (player)
	bool writePlayerBoard(std::string orientation, const std::string input);//similir to writeBoard but made for the board in programm2, checks diferent conditions and assumes were check in programa 1
	bool deletePlayerWord(std::string position);//deletes a word from the programm 2 board
	bool RepeatPlayerWord(std::string word);
	bool RightPosition(std::string position);
	~Board();
private:
	unsigned int y;//board length
	unsigned int x;//board hight
	std::vector <std::vector <char> > matrix; //saves original board
	std::vector < std::pair < std::string, std::string >>internStruct; //saves all the words and respective positions from the loaded board
	std::vector < std::pair < std::string, std::string >>internStruct_new; //saves all the words and respective positions written on the game from the player
	std::vector <std::vector <char> > playerMatrix; //saves player board
};
#endif
